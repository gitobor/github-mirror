name: Mirror Git

on:
  workflow_dispatch:
  schedule:
    - cron: "0 2 * * 3"

jobs:
  mirror:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Check tools
        run: |
          gh --version
          git --version

      - name: Login Source GitHub
        run: |
          echo "${{ secrets.SOURCE_TOKEN }}" > /tmp/.github_token
          gh auth login --with-token < /tmp/.github_token
          gh auth status
          rm -f /tmp/.github_token

      - name: List repos
        id: list_repos
        run: |
          gh repo list k8scat -L 1000 > /tmp/repos.txt
          cat /tmp/repos.txt | while read -r repo; do
            repo_name=$(echo ${repo} | awk '{print $1}' | awk -F/ '{print $2}')
            if [[ -f "/tmp/repo_list.txt" ]]; then
              echo -n ",${repo_name}" >> /tmp/repo_list.txt
            else
              echo -n "${repo_name}" >> /tmp/repo_list.txt
            fi
          done
          repo_list=$(cat /tmp/repo_list.txt)
          echo "::set-output name=repo_list::${repo_list}"

      - name: Mirror Git
        uses: k8scat/action-mirror-git@v0.0.27
        with:
          source_protocol: https
          source_host: github.com
          source_username: k8scat
          source_token: ${{ secrets.SOURCE_TOKEN }}
          dest_protocol: https
          dest_host: github.com
          dest_username: k8scat-archived
          dest_token: ${{ secrets.DEST_TOKEN }}
          dest_token_username: gitobor
          push_tags: "true"
          mirror_repos: ${{ steps.list_repos.outputs.repo_list }}
          dest_create_repo_script: |
            # create repo via github cli
            if ! gh auth status; then
              token_file="/tmp/.github_token"
              echo "${INPUT_DEST_TOKEN}" > "${token_file}"
              gh auth login --with-token < "${token_file}"
              gh auth status
            fi

            found=$(gh repo list ${INPUT_DEST_USERNAME} -L 1000 --json name -t '{{range .}}{{tablerow (printf "\"%s\"" .name)}}{{end}}' | grep -i "\"${REPO_NAME}\"")
            if [[ -n "${found}" ]]; then
              echo "repo ${REPO_NAME} already exists"
              exit 0
            fi
            gh repo create "${INPUT_DEST_USERNAME}/${REPO_NAME}" --private
          force_push: "true"
          dest_delete_repo_script: |
            # delete repo via github cli
            if ! gh auth status; then
              token_file="/tmp/.github_token"
              echo "${INPUT_DEST_TOKEN}" > "${token_file}"
              gh auth login --with-token < "${token_file}"
              gh auth status
            fi
            gh repo delete "${INPUT_DEST_USERNAME}/${REPO_NAME}" --confirm
          lark_webhook: ${{ secrets.LARK_WEBHOOK }}
          ignore_error: "true"
